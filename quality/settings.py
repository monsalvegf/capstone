"""
Django settings for calidad project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%e*t4lsva0g-dci8qmxu2i5jgrcha)$byau_u(8alpy8d#e5+x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'nonconformities',
    'accounts',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'quality.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',  # Directorio global de plantillas (opcional)
        ],
        'APP_DIRS': True,  # Habilita la búsqueda de plantillas en las aplicaciones
        'OPTIONS': {
            'context_processors': [
                # Procesadores de contexto por defecto
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'quality.wsgi.application'


# ==================================================================================
# DATABASE CONFIGURATION - SQLite Optimizado para Producción
# ==================================================================================
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
#
# DISEÑO:
#   - Optimizado para 10 usuarios consultando y 4 escribiendo simultáneamente
#   - WAL mode habilitado para máxima concurrencia
#   - Timeout de 20 segundos para evitar "database is locked"
#   - Cache de 64MB para mejorar performance de lectura
#
# VERIFICACIÓN DESPUÉS DE DEPLOYMENT:
#   1. Ejecutar en shell de Django:
#      python manage.py shell
#      >>> from quality.settings import enable_sqlite_wal_mode
#      >>> enable_sqlite_wal_mode()
#
#   2. Verificar que aparezcan 3 archivos en el directorio:
#      - db.sqlite3       (base de datos principal)
#      - db.sqlite3-wal   (Write-Ahead Log, cambios pendientes)
#      - db.sqlite3-shm   (Shared Memory, índice del WAL)
#
# IMPORTANTE:
#   - Los archivos -wal y -shm son NORMALES y NECESARIOS con WAL mode
#   - NO borrar estos archivos mientras la aplicación esté corriendo
#   - En backups, incluir los 3 archivos para garantizar consistencia
#
# CUÁNDO MIGRAR A PostgreSQL:
#   - Más de 20 usuarios concurrentes
#   - Escrituras intensivas (>100 transacciones/segundo)
#   - Necesidad de replicación o alta disponibilidad
#   - Base de datos > 100GB
# ==================================================================================

# Configuración optimizada de SQLite para producción
# Diseñada para hasta 10 usuarios consultando y 4 escribiendo simultáneamente
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',

        # TIMEOUT: 20 segundos de espera antes de lanzar error de bloqueo
        # Beneficio: Evita errores "database is locked" en escrituras concurrentes
        # Por defecto SQLite usa 5 segundos, aumentamos a 20 para mayor tolerancia
        'timeout': 20,

        # OPTIONS: Configuraciones adicionales de SQLite
        'OPTIONS': {
            # INIT COMMAND: Comandos SQL ejecutados al conectar con la BD
            # Estas optimizaciones se ejecutan cada vez que Django abre una conexión
            #
            # EXPLICACIÓN DE CADA PRAGMA:
            #
            # 1. journal_mode=WAL - Write-Ahead Logging
            #    Permite lecturas y escrituras simultáneas sin bloqueos
            #    Crea archivos -wal y -shm (normales y necesarios)
            #
            # 2. busy_timeout=20000 - Timeout de 20 segundos
            #    Refuerza el timeout para evitar "database is locked"
            #
            # 3. synchronous=NORMAL - Balance velocidad/seguridad
            #    Con WAL mode, NORMAL es seguro y ~50% más rápido que FULL
            #
            # 4. cache_size=-64000 - Cache de 64MB en RAM
            #    Reduce lecturas de disco, acelera consultas (default: 2MB)
            #
            # 5. temp_store=MEMORY - Tablas temporales en RAM
            #    Acelera operaciones con índices temporales y ORDER BY
            #
            'init_command': (
                "PRAGMA journal_mode=WAL; "
                "PRAGMA busy_timeout=20000; "
                "PRAGMA synchronous=NORMAL; "
                "PRAGMA cache_size=-64000; "
                "PRAGMA temp_store=MEMORY;"
            ),
        },
    }
}


# Función helper para verificar/habilitar WAL mode en SQLite
# Útil para ejecutar manualmente o en scripts de deployment
def enable_sqlite_wal_mode():
    """
    Habilita Write-Ahead Logging en SQLite y verifica la configuración.

    Esta función se puede ejecutar desde manage.py shell para:
    1. Verificar que WAL mode está habilitado
    2. Forzar la activación de WAL si no está activo
    3. Mostrar información de configuración actual

    Uso:
        from quality.settings import enable_sqlite_wal_mode
        enable_sqlite_wal_mode()

    Retorna:
        dict con información de la configuración actual
    """
    import sqlite3
    from pathlib import Path

    db_path = DATABASES['default']['NAME']

    try:
        conn = sqlite3.connect(str(db_path), timeout=20)
        cursor = conn.cursor()

        # Habilitar WAL mode
        cursor.execute("PRAGMA journal_mode=WAL;")
        journal_mode = cursor.fetchone()[0]

        # Verificar otras configuraciones
        cursor.execute("PRAGMA synchronous;")
        synchronous = cursor.fetchone()[0]

        cursor.execute("PRAGMA cache_size;")
        cache_size = cursor.fetchone()[0]

        cursor.execute("PRAGMA temp_store;")
        temp_store = cursor.fetchone()[0]

        conn.close()

        config_info = {
            'journal_mode': journal_mode,
            'synchronous': synchronous,
            'cache_size_pages': cache_size,
            'temp_store': temp_store,
            'database_path': str(db_path),
        }

        print("✓ Configuración de SQLite actualizada:")
        for key, value in config_info.items():
            print(f"  {key}: {value}")

        if journal_mode.upper() == 'WAL':
            print("\n✓ WAL mode está HABILITADO correctamente")
        else:
            print(f"\n⚠ WAL mode NO está habilitado (modo actual: {journal_mode})")

        return config_info

    except Exception as e:
        print(f"✗ Error al configurar SQLite: {e}")
        return None


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Directorio donde se recopilarán los archivos estáticos (para producción)
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración de autenticación
LOGIN_URL = 'accounts:login'  # Nombre de la ruta de inicio de sesión
LOGIN_REDIRECT_URL = 'nonconformities:nonconformity_list'  # Redirección después de iniciar sesión
LOGOUT_REDIRECT_URL = '/'
